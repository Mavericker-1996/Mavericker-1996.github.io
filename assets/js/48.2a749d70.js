(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{206:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),a("p",[t._v("元素(Elements) 是 React 应用中最小的构建块(building blocks)，这里的元素也就是指React元素。")]),t._v(" "),t._m(2),t._v(" "),a("p",[t._v("React DOM 会负责更新 DOM ，以匹配React元素（React DOM takes care of updating the DOM to match the React elements.），即使DOM元素与React元素保持一致。")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),a("p",[t._v("React 元素是 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Immutable_object",target:"_blank",rel:"noopener noreferrer"}},[t._v("不可突变（immutable）"),a("OutboundLink")],1),t._v(" 的。一旦你创建了一个元素, 就不能再修改其子元素或任何属性。一个元素就像电影里的一帧: 它表示在某一特定时间点的 UI 。")]),t._v(" "),t._m(5),t._v(" "),t._m(6),a("p",[t._v("渲染一个 React 元素到由 "),a("code",[t._v("container")]),t._v(" 提供的 DOM 中，并且返回组件的一个 "),a("a",{attrs:{href:"https://react.css88.com/docs/more-about-refs.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("引用(reference)"),a("OutboundLink")],1),t._v(" （或者对于 "),a("a",{attrs:{href:"https://react.css88.com/docs/components-and-props.html#functional-and-class-components",target:"_blank",rel:"noopener noreferrer"}},[t._v("无状态组件"),a("OutboundLink")],1),t._v(" 返回 "),a("code",[t._v("null")]),t._v("）。")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),a("p",[t._v("最简单的定义组件的方法是写一个 JavaScript 函数：")]),t._v(" "),t._m(12),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),a("p",[t._v("你也可以用一个 "),a("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES6 的 class"),a("OutboundLink")],1),t._v(" 来定义一个组件:")]),t._v(" "),t._m(16),a("p",[t._v("上面两个组件从 React 的角度来看是等效的。")]),t._v(" "),t._m(17),t._v(" "),a("p",[t._v("与类组件相比，函数式组件有以下特点：")]),t._v(" "),t._m(18),t._v(" "),t._m(19)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"元素与渲染-组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元素与渲染-组件","aria-hidden":"true"}},[this._v("#")]),this._v(" 元素与渲染 & 组件")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"react元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react元素","aria-hidden":"true"}},[this._v("#")]),this._v(" React元素")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("不同于浏览器的 DOM 元素， React 元素是"),s("strong",[this._v("普通的对象")]),this._v("，非常容易创建。它代表了虚拟DOM中的一个对象。它描述了组件实例和DOM节点的关系在React中，通过使用"),s("code",[this._v("React.createElment")]),this._v("可以实现虚拟DOM节点。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("组件和React元素的关系：组件就是一个方法或者一个类，可以接受一定的输入，之后返回一个React 元素。"),s("strong",[this._v("元素是构成组件的”材料”。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"reactdom-render"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reactdom-render","aria-hidden":"true"}},[this._v("#")]),this._v(" ReactDOM.render")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("就我们所知, 更新 UI 的唯一方法是创建一个新的元素, 并将其传入 "),s("code",[this._v("ReactDOM.render()")]),this._v(" 方法。用法如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("ReactDOM"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("render")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果 React 元素先前已经被渲染到了 "),s("code",[this._v("container")]),this._v(" 中，那么将对其执行更新，并且对 DOM 只修改需要修改的地方，以反映最新的 React元素。"),s("strong",[this._v("即通过diff算法只更新必需要更新的部分")]),this._v(" 。有以下几点需要注意：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",[s("li",[s("code",[this._v("ReactDOM.render()")]),this._v(" 控制传入的容器节点的内容。当第一次调用时，容器内部的任何现有DOM元素都会被替换。 之后使用 React 的 DOM diffing 算法来进行有效的更新。")]),this._v(" "),s("li",[s("code",[this._v("ReactDOM.render()")]),this._v(" 不会修改容器节点（只修改容器的子节点）。它可能插入一个组件到已存在的 DOM 节点中而不会覆盖已经存在的子节点。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件","aria-hidden":"true"}},[this._v("#")]),this._v(" 组件")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("组件(Components) 让你可以将用户界面分成独立的，可复用的小部件，并可以对每个部件进行单独的设计。"),s("strong",[this._v("从定义上来说， 组件就像JavaScript的函数，它可以接收任意输入(称为”props”)， 并返回 React 元素，用以描述屏幕显示内容。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"函数式组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数式组件","aria-hidden":"true"}},[this._v("#")]),this._v(" 函数式组件")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Welcome")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("h1"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("Hello"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("props"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("h1"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v('这个函数是一个有效的 React 组件，也称"无状态组件"，因为它接收一个 '),s("code",[this._v("props")]),this._v(" 参数, 并返回一个 React 元素。 我们把此类组件称为”函数式(Functional)“组件， 因为从字面上看来它就是一个 JavaScript 函数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("无状态函数式组件形式上表现为一个只带有一个"),s("code",[this._v("render")]),this._v("方法的组件类，通过函数形式或者ES6 arrow function的形式在创建，并且该组件是无"),s("code",[this._v("state")]),this._v("状态的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"类组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类组件","aria-hidden":"true"}},[this._v("#")]),this._v(" 类组件")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Welcome")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("React"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("render")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("h1"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("Hello"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("h1"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"两者区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两者区别","aria-hidden":"true"}},[this._v("#")]),this._v(" 两者区别")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ol",[a("li",[a("strong",[t._v("组件不会被实例化，整体渲染性能得到提升")]),t._v("\n因为组件被精简成一个render方法的函数来实现的，由于是无状态组件，所以无状态组件就不会在有组件实例化的过程，无实例化过程也就不需要分配多余的内存，从而性能得到一定的提升。")]),t._v(" "),a("li",[a("strong",[t._v("组件不能访问this对象")]),t._v("\n无状态组件由于没有实例化过程，所以无法访问组件this中的对象，例如："),a("code",[t._v("this.ref")]),t._v("、"),a("code",[t._v("this.state")]),t._v("等均不能访问。若想访问就不能使用这种形式来创建组件。")]),t._v(" "),a("li",[a("strong",[t._v("组件无法访问生命周期的方法")]),t._v("\n因为无状态组件是不需要组件生命周期管理和状态管理，所以底层实现这种形式的组件时是不会实现组件的生命周期方法。所以无状态组件是不能参与组件的各个生命周期管理的。")]),t._v(" "),a("li",[a("strong",[t._v("无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用")]),t._v("。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("无状态组件被鼓励在大型项目中尽可能以简单的写法来分割原本庞大的组件，未来React也会这种面向无状态组件在譬如无意义的检查和内存分配领域进行一系列优化，所以"),s("strong",[this._v("只要有可能，尽量使用无状态组件")]),this._v("。")])}],!1,null,null,null);s.default=n.exports}}]);